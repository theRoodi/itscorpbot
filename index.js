require('dotenv').config()
const { Bot, Keyboard, InlineKeyboard, GrammyError,HttpError  } = require('grammy')


const bot = new Bot(process.env.BOT_API_KEY)

bot.command('start', async (ctx) => {
    const startKeyboard = new Keyboard() 
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! \n–í–æ—Ç –∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!')
    await ctx.reply('üëá–°–∫–æ—Ä–µ–π –Ω–∞–∂–∏–º–∞–π –º–µ–Ω—é –∏ –Ω–∞—á–∏–Ω–∞–π –∫–≤–µ—Å—Ç')
})

bot.command('about', async (ctx) => {
  await ctx.reply('–ù–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∞')
})

bot.command('quest', async (ctx) => {
  const questKeyboard = new Keyboard()
  .text('–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å')
  .text('–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π')
  .row()
  .text('–ë–∞–ª–∞–Ω—Å')
  .text('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support')
  .resized()
  await ctx.reply('–°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–∞—à –∫–≤–µ—Å—Ç, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã', {
    reply_markup: questKeyboard
})
})
const backKeyboard = new InlineKeyboard().text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');
bot.hears('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', async (ctx) => {
  await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å', { reply_markup: backKeyboard,
  });
})

bot.hears(["–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å"], async (ctx) => {
    const inlineKeyboard = new InlineKeyboard()
    .text("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", JSON.stringify({
        type: ctx.message.text,
        questionId: 1
    }))
    .text("–û—Ç–º–µ–Ω–∞", "cancel")
    await ctx.reply(`–ß—Ç–æ —Ç–∞–∫–æ–µ ${ctx.message.text}`, {
        reply_markup: inlineKeyboard
    })
})

bot.api.setMyCommands([
  {command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'}, 
  {command: 'about', description: '–ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?'}, 
  {command: 'quest', description: '–ö–≤–µ—Å—Ç'} 
])

bot.on('callback_query:data', async (ctx) => {
    if (ctx.callbackQuery.data === 'cancel') {
        await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await ctx.answerCallbackQuery()
        return
    }
    const callbackData = JSON.parse(ctx.callbackQuery.data)
    await ctx.reply(`${callbackData.type} - –≤ –Ω–∞—à–µ–º –∫–≤–µ—Å—Ç–µ`)
    await ctx.answerCallbackQuery()
})






bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ", e.description);
    } else if (e instanceof HttpError) {
      console.error("–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –¢–µ–ª–µ–≥—Ä–∞–º–∞: ", e);
    } else {
      console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ", e);
    } 
  });

bot.start()
