require('dotenv').config()
const { Bot, Keyboard, InlineKeyboard, GrammyError,HttpError  } = require('grammy')


const bot = new Bot(process.env.BOT_API_KEY)

bot.command('start', async (ctx) => {
    const startKeyboard = new Keyboard()
    .text('–í–æ–ø—Ä–æ—Å 1')
    .text('–í–æ–ø—Ä–æ—Å 2')
    .row()
    .text('–í–æ–ø—Ä–æ—Å 3')
    .text('–í–æ–ø—Ä–æ—Å 4')
    .resized()
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! \n–í–æ—Ç –∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫–≤–µ—Å—Ç–∞')
    await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ üëá', {
        reply_markup: startKeyboard
    })
})

bot.hears(["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3", "–í–æ–ø—Ä–æ—Å 4"], async (ctx) => {
    const inlineKeyboard = new InlineKeyboard()
    .text("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", JSON.stringify({
        type: ctx.message.text,
        questionId: 1
    }))
    .text("–û—Ç–º–µ–Ω–∞", "cancel")
    await ctx.reply(`–ß—Ç–æ —Ç–∞–∫–æ–µ ${ctx.message.text}`, {
        reply_markup: inlineKeyboard
    })
})

bot.on('callback_query:data', async (ctx) => {
    if (ctx.callbackQuery.data === 'cancel') {
        await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await ctx.answerCallbackQuery()
        return
    }
    const callbackData = JSON.parse(ctx.callbackQuery.data)
    await ctx.reply(`${callbackData.type} - –≤ –Ω–∞—à–µ–º –∫–≤–µ—Å—Ç–µ`)
    await ctx.answerCallbackQuery()
})

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e.description);
    } else if (e instanceof HttpError) {
      console.error("–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –¢–µ–ª–µ–≥—Ä–∞–º–∞:", e);
    } else {
      console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
    } 
  });

bot.start()
